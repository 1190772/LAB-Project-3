@startuml
'https://plantuml.com/class-diagram

class SearchShipUI {
- controller
}

class SearchShipController {
- ShipBST
- ship
+ getShipPositions(startDate, endDate)
+ findShip(code)
}

class ShipBST {
+ findShip(code)
- determineCodeType(code)
- findShipByMMSI(MMSI)
- findShipByIMO(IMO)
- findShipByCallSign(CallSign)
+ topNShips(int n, LocalDateTime start, LocalDateTime end)
+ getShipPairs()
- getPositions()
}

class Ship {
-MMSI
-name
-IMO
-numberEnergyGenerators
-generatorPowerOutput
-callSign
-vesselType
-length
-width
-capacity
-draft
+ Ship(MMSI, name, IMO, numberEnergyGenerators,
          generatorPowerOutput, callSign, vesselType, length, width, capacity, draft)
+ toString()
}

class ShipPosition {
-baseDateTime
-latitude
-longitude
-sog
-cog
-heading
-position
-transceiverClass
+ toString()
}

class ShipMovementsUI {
- ShipMovementsController controller
- ShipMovements details
}

class ShipMovementsController {
- ShipPositionBST shipPositionBST
- SearchShipController searchShipController
}

class ShipMovements {
- String shipCode
- String shipName
- LocalDateTime startBaseDateTime
- LocalDateTime endBaseDateTime
- Time totalMovementTime
- Integer totalNumberMovements
- Double maxSOG
- Double meanSOG
- Double maxCOG
- Double meanCOG
- Double departureLatitude
- Double departureLongitude
- Double arrivalLatitude
- Double arrivalLongitude
- Double travelledDistance
- Double deltaDistance
+ ShipMovements(shipCode, shipName, startBaseDateTime, \nendBaseDateTime, totalMovementTime, totalNumberMovements, \nmaxSOG, meanSOG, maxCOG, meanCOG, departureLatitude, \ndepartureLongitude, arrivalLatitude, arrivalLongitude, \ntravelledDistance, deltaDistance)
+ toString()
}

class ImportShipsUI {
- controller
}

class ImportShipsController {
+ importShips()
- ShipBST bst
}

class TopNShipsUI {
- TopNShipsController controller
}

class TopNShipsController {
- ShipBST shipBST
}

class ShipPositionBST {
-list
+insert(ShipPosition element)
+remove(ShipPosition element)
+distanceBetweenTwoCoordinates(ShipPosition pos1, ShipPosition pos2)
+distanceBetweenTwoCoordinates(double lon1, double lat1, double lon2, double lat2)
+deltaDistance()
+travelledDistance()
+travelledDistanceInterval(LocalDateTime start, LocalDateTime end)
+travelledDistance(ArrayList<ShipPosition> list, int position)
+totalNumberMovements()
+totalMovementTime()
+maxSOG()
+meanSOG()
+meanSOGInterval(LocalDateTime start, LocalDateTime end)
+maxCOG()
+meanCOG()
+getPositions(LocalDateTime startDate, LocalDateTime endDate)
+ getFirstPosition()
+ getLastPosition()
}

class ShipPairsUI {
- controller
}

class ShipPairsController {
- ShipBST
+ getShipPairs()
}

class ImportPortsUI {
- controller
}

class ImportPortsController {
+ ImportPorts()
}

class Port {
- identification
- name
- continent
- country
- latitude
- longitude
+ Port(identification, name, continent, country, latitude, longitude)
+ getID()
+ getName()
+ getCountry()
+ getContinent()
+ getLatitude()
+ getLongitude()
}

class Port2DTree {
+ createBalancedPort2DTree()
+ findNearestNeighbour(lat, lon)
+ getAllPorts()
- findNearestNeighbour(port, lat, lon, closestPort, comLat)
}

class FindClosestPortController {
+ FindClosestPort()
}

class BuildFreightNetworkUI {
- controller
}

class BuildFreightNetworkController {
- countryStore;
- port2DTree;
- borderStore;
- seaDistanceStore;
+ buildFreightNetwork()
}

class SeaDistance {
+ getPort1()
+ getPort2()
+ getDistance()
}

class SeaDistanceStore {
+ getSeaDists()
}

class Border {
+ getCountry1()
+ getCountry2()
}

class BorderStore {
+ getBorders()
}

class Country {
+ getAlpha2_code()
+ getAlpha3_code()
+ getcapital()
+ getcountry()
+ getcontinent()
+ getpopulation()
+ getlatitude()
+ getlongitude()
}

class CountryStore {
+ getCountries()
}

class ColourMapUI {
- controller
}

class ColourMapController {
+ calculateNumberOfColours(Graph grafo)
+ colourMap(Graph<V, E> grafo)
+ atributeColour(List<V> l, Map<V, Integer> map, int numberOfColours)
}

class FreightNetwork {
+ FreightNetwork(List<Object> vertices, Long[][] m)
+ ClosestPlaces(boolean directed, List<V> vs, E[][] m)
}


class ClosestPlacesUI {
- controller
}

class ClosestPlacesController {
+ closestPlaces(int n)
- closestPlaces(FreightNetwork shortPathMatrix, int n)
}

class ContainerOperationsUI {
- controller
}

class ContainerOperationsController {
- ContainerOperationStoreDb
+ getContainerOperationsByCargoManifestID(cargoManifestID)
}

class ContainerOperationStoreDb {
+ getContainerOperationsByCargoManifestID(cargoManifestID)
}

class ContainerOperation {
- user
- dateTime
- type
- containerID
- cargoManifestID
+ new (user, dateTime, type, containerID, cargoManifestID)
+ toString()
}

class ContainersRoutesUI {
- controller
}

class ContainersRoutesController {
+ getContainersRoutes(userID, containerID)
}

class DatabaseFunctions {
+ getContainersRoutes(databaseConnection, userID, containerID)
- loadFunction(filename)
- getResultSetFromSysRefCursor(databaseConnection, function, columnsForTable) throws SQLException
}

class PortOccupationUI {
- controller
}

class PortOccupationController {
- portOccupationDb
+ getPortOccupation(port_id, month)
}

class PortOccupationDb {
+ getPortOccupation(port_id, month)
}

class CrewUI {
- controller
}

class CrewController {
+ getContainersOfShip(shipID)
}

class DatabaseFunctions {
+ getContainersOfShip(databaseConnection, shipID)
- loadFunction(filename)
- getResultSetFromSysRefCursor(databaseConnection, function, columnsForTable) throws SQLException
}

ImportShipsController <.. ImportShipsUI
Ship <.. ImportShipsUI
ShipBST <.. ImportShipsController


ShipMovementsController <.. ShipMovementsUI
ShipMovements <.. ShipMovementsUI
SearchShipController <.. ShipMovementsController
ShipPositionBST <.. ShipMovementsController


SearchShipController <.. SearchShipUI
ShipPosition <.. SearchShipUI
Ship <.. SearchShipUI
Ship <.. SearchShipController
ShipBST <.. SearchShipController


ShipPosition <-- Ship
Ship <-- ShipBST
ShipMovements <-- ShipPosition
ShipPosition <-- ShipPositionBST


TopNShipsController <.. TopNShipsUI
ShipBST <.. TopNShipsController
Ship <.. TopNShipsUI
ShipPositionBST <.. TopNShipsController


ShipPairsUI ..> ShipPairsController
ShipPairsController ..> ShipBST


ImportPortsController <.. ImportPortsUI
Port2DTree <.. ImportPortsController
Port <-- ImportPortsController

Port2DTree <.. FindClosestPortController
ShipBST <.. FindClosestPortController
ShipPositionBST <.. FindClosestPortController
Port <-- FindClosestPortController
ShipPosition <-- FindClosestPortController
Ship <-- FindClosestPortController

BuildFreightNetworkController <.. BuildFreightNetworkUI
FreightNetwork <.. BuildFreightNetworkController
Port2DTree <.. BuildFreightNetworkController
SeaDistanceStore <.. BuildFreightNetworkController
BorderStore <.. BuildFreightNetworkController
CountryStore <.. BuildFreightNetworkController
Port <-- Port2DTree
SeaDistance <-- SeaDistanceStore
Border <-- BorderStore
Country <-- CountryStore

ColourMapController <.. ColourMapUI
FreightNetwork <.. ColourMapController

ClosestPlacesController <.. ClosestPlacesUI
FreightNetwork <... ClosestPlacesController
BuildFreightNetworkController <.. ClosestPlacesController

ContainerOperationsController <.. ContainerOperationsUI
ContainerOperationStoreDb <.. ContainerOperationsController
ContainerOperation <-- ContainerOperationStoreDb
ContainerOperation <.. ContainerOperationsUI

ContainersRoutesController <.. ContainersRoutesUI
DatabaseFunctions <.. ContainersRoutesController

PortOccupationUI <.. PortOccupationController
PortOccupationController <.. PortOccupationDb

CrewController <.. CrewUI
DatabaseFunctions <.. CrewController

@enduml